import { useState, useEffect, useRef } from "react";

function App() {
  // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±–æ–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)
  const [simulationData, setSimulationData] = useState({
    total: 0,
    served: 0,
    lost: 0,
    // –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏:
    p_served: 0,
    p_lost: 0,
    ratio: null,
    // –î–ª—è –°–¢–û:
    avg_wait_time: 0,
    avg_service_time: 0,
    finished: false,
  });
  const [ws, setWs] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  // 0 ‚Äì –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è, 1 ‚Äì –°–¢–û
  const [page, setPage] = useState(0);
  // –§–ª–∞–≥ –¥–ª—è –°–¢–û: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ª–∏ –æ—á–µ—Ä–µ–¥—å (true = –ª–∏–º–∏—Ç, false = –±–µ–∑ –ª–∏–º–∏—Ç–∞)
  const [queryLimit, setQueryLimit] = useState(false);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∑–≤—É–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (–¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏)
  const prevServedRef = useRef(simulationData.served);
  useEffect(() => {
    if (page === 0 && simulationData.served > prevServedRef.current) {
      const audio = new Audio("/ring.wav");
      audio.play().catch((err) =>
        console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:", err)
      );
    }
    prevServedRef.current = simulationData.served;
  }, [simulationData.served, page]);

  // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
  const startTelephoneSimulation = async () => {
    await fetch("http://localhost:8000/lab_5/telephone_line_simulation/", {
      method: "POST",
    });
    const socket = new WebSocket("ws://localhost:8000/ws/telephone_line_simulation");
    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setSimulationData(data);
      if (data.finished) {
        setModalVisible(true);
        socket.close();
      }
    };
    setWs(socket);
  };

  // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –°–¢–û. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST —Å —Ñ–ª–∞–≥–æ–º query_limit.
  const startServiceStationSimulation = async () => {
    await fetch("http://localhost:8000/lab_5/service_station_simulation", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ query_limit: queryLimit ? "true" : "false" }),
    });
    const socket = new WebSocket("ws://localhost:8000/ws/service_station_simulation");
    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setSimulationData(data);
      if (data.finished) {
        setModalVisible(true);
        socket.close();
      }
    };
    setWs(socket);
  };

  const closeModal = () => {
    setModalVisible(false);
  };

  return (
    <div style={{ padding: "20px", textAlign: "center" }}>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü */}
      <div
        style={{
          width: "250px",
          height: "50px",
          backgroundColor: "#ddd",
          borderRadius: "25px",
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          padding: "5px",
          margin: "0 auto 20px auto",
          position: "relative",
          cursor: "pointer",
          transition: "all 0.3s ease",
          boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
        }}
        onClick={() => setPage(page === 0 ? 1 : 0)}
      >
        {/* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
        <div
          style={{
            position: "absolute",
            width: "50%",
            height: "100%",
            backgroundColor: "rgba(173, 216, 230, 0.7)",
            borderRadius: "25px",
            transition: "transform 0.3s ease",
            transform: page === 0 ? "translateX(0%)" : "translateX(100%)",
          }}
        ></div>
        <div
          style={{
            width: "50%",
            textAlign: "center",
            fontSize: "18px",
            fontWeight: "bold",
            zIndex: 2,
            color: page === 0 ? "#000" : "#555",
          }}
        >
          üìû –õ–∏–Ω–∏—è
        </div>
        <div
          style={{
            width: "50%",
            textAlign: "center",
            fontSize: "18px",
            fontWeight: "bold",
            zIndex: 2,
            color: page === 1 ? "#000" : "#555",
          }}
        >
          üîß –°–¢–û
        </div>
      </div>

      {page === 0 ? (
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
        <>
          <h1>–°–∏–º—É–ª—è—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏</h1>
          <button onClick={startTelephoneSimulation}>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é</button>
          <div style={{ marginTop: "20px" }}>
            <h2>–°—á—ë—Ç—á–∏–∫–∏</h2>
            <p>–ü—Ä–∏–Ω—è—Ç–æ: {simulationData.served}</p>
            <p>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {simulationData.lost}</p>
            <p>–í—Å–µ–≥–æ: {simulationData.total}</p>
          </div>
          {modalVisible && (
            <div
              style={{
                position: "fixed",
                top: "20%",
                left: "50%",
                transform: "translate(-50%, 0)",
                backgroundColor: "#fff",
                padding: "20px",
                border: "1px solid #000",
                boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
              }}
            >
              <h2>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏</h2>
              <p>–û–±—â–µ–µ —á–∏—Å–ª–æ –≤—ã–∑–æ–≤–æ–≤: {simulationData.total}</p>
              <p>–û–±—Å–ª—É–∂–µ–Ω–æ: {simulationData.served}</p>
              <p>–û—Ç–∫–∞–∑–æ–≤: {simulationData.lost}</p>
              <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {simulationData.p_served?.toFixed(4) || 0}</p>
              <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {simulationData.p_lost?.toFixed(4) || 0}</p>
              <p>
                –û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã—Ö –∫ –æ—Ç–∫–∞–∑–∞–º:{" "}
                {simulationData.ratio !== null ? simulationData.ratio.toFixed(4) : "N/A"}
              </p>
              <button onClick={closeModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
          )}
          <div>
            <img
              src="https://media1.tenor.com/m/GBf9_tZFfakAAAAC/phone-telephone.gif"
              alt="phone"
            />
          </div>
        </>
      ) : (
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –°–¢–û
        <>
          <h1>–°–∏–º—É–ª—è—Ü–∏—è –°–¢–û</h1>
          <div style={{ marginBottom: "20px" }}>
            <label style={{ fontSize: "16px", marginRight: "10px" }}>
              –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å?
            </label>
            <input
              type="checkbox"
              checked={queryLimit}
              onChange={(e) => setQueryLimit(e.target.checked)}
            />
          </div>
          <button onClick={startServiceStationSimulation}>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –°–¢–û</button>
          <div style={{ marginTop: "20px" }}>
            <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <p>–ü–æ—Å—Ç—É–ø–∏–ª–æ –º–∞—à–∏–Ω: {simulationData.total}</p>
            <p>–û–±—Å–ª—É–∂–µ–Ω–æ –º–∞—à–∏–Ω: {simulationData.served}</p>
            <p>–û—Ç–∫–∞–∑–æ–≤: {simulationData.lost}</p>
            <p>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {simulationData.avg_wait_time}</p>
            <p>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {simulationData.avg_service_time}</p>
          </div>
          {modalVisible && (
            <div
              style={{
                position: "fixed",
                top: "20%",
                left: "50%",
                transform: "translate(-50%, 0)",
                backgroundColor: "#fff",
                padding: "20px",
                border: "1px solid #000",
                boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
              }}
            >
              <h2>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –°–¢–û</h2>
              <p>–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –º–∞—à–∏–Ω: {simulationData.total}</p>
              <p>–ß–∏—Å–ª–æ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω: {simulationData.served}</p>
              <p>–ß–∏—Å–ª–æ –æ—Ç–∫–∞–∑–æ–≤: {simulationData.lost}</p>
              <p>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {simulationData.avg_wait_time}</p>
              <p>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {simulationData.avg_service_time}</p>
              <button onClick={closeModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
          )}
          <div>
            <img
              src="https://media.tenor.com/images/2d2e9c1f9a351bb68b9ecfda1f8810a0/tenor.gif"
              alt="service station"
            />
          </div>
        </>
      )}
    </div>
  );
}

export default App;
